generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id                     String          @id @default(cuid())
  name                   String
  email                  String          @unique
  password               String?
  emailVerified          DateTime?
  emailVerificationToken String?         @unique
  passwordResetToken     String?         @unique
  passwordResetExpires   DateTime?
  image                  String?
  role                   Role            @default(USER)
  createdAt              DateTime        @default(now())
  lastLogin              DateTime?
  r2FolderName           String?         @unique
  accounts               Account[]
  activities             Activity[]
  analytics              Analytics[]
  images                 Image[]
  sessions               Session[]
  systemLogs             SystemLog[]
  systemMessages         SystemMessage[]
  bans                   UserBan[]
  bansByUser             UserBan[]       @relation("BannedByUser")
  unbansByUser           UserBan[]       @relation("UnbannedByUser")
  apiKeys                ApiKey[]

  @@index([emailVerificationToken])
  @@index([passwordResetToken])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Image {
  id         String      @id @default(cuid())
  fileName   String
  fileKey    String      @unique
  fileSize   Int
  fileType   String
  uploadedAt DateTime    @default(now())
  userId     String
  height     Int?
  mimeType   String?
  width      Int?
  uploadSource String?   @default("web") // "web" or "cli"
  hasThumbnails Boolean  @default(false) // Track if thumbnails were successfully generated
  analytics  Analytics[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([uploadedAt])
  @@index([uploadSource])
}

model Analytics {
  id        String         @id @default(cuid())
  imageId   String
  userId    String
  event     AnalyticsEvent
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  createdAt DateTime       @default(now())
  image     Image          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([imageId])
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

model Activity {
  id              String       @id @default(cuid())
  userId          String
  type            ActivityType
  message         String
  metadata        String?      @db.LongText
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime     @default(now())
  isAdminActivity Boolean      @default(false)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([isAdminActivity])
}

model SystemHealth {
  id           String   @id @default(cuid())
  service      String   @unique
  status       String
  uptime       Float
  lastCheck    DateTime @default(now())
  responseTime Int?
  metadata     String?  @db.LongText

  @@index([service])
  @@index([lastCheck])
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  source    String
  userId    String?
  ipAddress String?
  metadata  String?  @db.LongText
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([level])
  @@index([source])
  @@index([createdAt])
  @@index([userId])
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
  updatedBy   String?

  @@index([key])
}

model SystemMessage {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  type      MessageType
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  createdBy String
  user      User        @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([createdAt])
  @@index([createdBy], map: "SystemMessage_createdBy_fkey")
}

model GuestUpload {
  id         String    @id @default(cuid())
  fileKey    String    @unique
  fileName   String
  fileSize   Int
  fileType   String
  mimeType   String?
  width      Int?
  height     Int?
  uploadedAt DateTime  @default(now())
  expiresAt  DateTime
  ipAddress  String?
  userAgent  String?
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  uploadSource String?   @default("web") // "web" or "cli"
  hasThumbnails Boolean  @default(false) // Track if thumbnails were successfully generated

  @@index([expiresAt])
  @@index([isDeleted])
  @@index([uploadedAt])
  @@index([uploadSource])
}

model UserBan {
  id          String    @id @default(cuid())
  userId      String?
  email       String?
  ipAddresses String?   @db.LongText // JSON array of IP addresses
  banType     BanType
  reason      String?   @db.Text
  isActive    Boolean   @default(true)
  bannedAt    DateTime  @default(now())
  bannedBy    String
  unbannedAt  DateTime?
  unbannedBy  String?
  expiresAt   DateTime? // For temporary bans
  metadata    String?   @db.LongText // Additional ban info
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  bannedByUser User     @relation("BannedByUser", fields: [bannedBy], references: [id])
  unbannedByUser User?  @relation("UnbannedByUser", fields: [unbannedBy], references: [id])

  @@index([userId])
  @@index([email])
  @@index([isActive])
  @@index([bannedAt])
  @@index([expiresAt])
}

enum Role {
  USER
  ADMIN
}

enum AnalyticsEvent {
  VIEW
  DOWNLOAD
  SHARE
  THUMBNAIL_GENERATED
}

enum ActivityType {
  UPLOAD
  DELETE
  VIEW
  DOWNLOAD
  SHARE
  LOGIN
  LOGOUT
  SETTINGS_CHANGED
  STORAGE_OPTIMIZED
  MILESTONE_REACHED
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum MessageType {
  CRITICAL
  WARNING
  INFO
}

enum BanType {
  ACCOUNT
  EMAIL
  IP
  FULL
}

model ApiKey {
  id            String    @id @default(cuid())
  name          String    // User-friendly name for the key
  keyHash       String    @unique // SHA-256 hash of the actual key
  keyPrefix     String    // First 8 characters for identification (e.g., "gcdn_1234")
  userId        String
  permissions   Json      // JSON object defining permissions
  rateLimit     Int       @default(1000) // Requests per hour
  lastUsedAt    DateTime?
  lastUsedIp    String?
  usageCount    BigInt    @default(0)
  isActive      Boolean   @default(true)
  expiresAt     DateTime? // Optional expiration
  isBlocked     Boolean   @default(false) // Security: temporary blocking
  blockedUntil  DateTime? // Security: block expiration
  ipWhitelist   Json?     // Security: allowed IP addresses (JSON array)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  usageLogs     ApiKeyUsage[]
  securityLogs  SecurityLog[]
  
  @@index([userId])
  @@index([keyHash])
  @@index([keyPrefix])
  @@index([isActive])
  @@index([expiresAt])
  @@index([isBlocked])
}

model ApiKeyUsage {
  id            String    @id @default(cuid())
  apiKeyId      String
  endpoint      String    // API endpoint accessed
  method        String    // HTTP method
  statusCode    Int       // Response status code
  responseTime  Int       // Response time in milliseconds
  ipAddress     String?
  userAgent     String?
  requestSize   Int?      // Request payload size in bytes
  responseSize  Int?      // Response payload size in bytes
  timestamp     DateTime  @default(now())
  
  // Relations
  apiKey        ApiKey    @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  
  @@index([apiKeyId])
  @@index([timestamp])
  @@index([endpoint])
  @@index([statusCode])
}

model RateLimitBucket {
  id            String    @id @default(cuid())
  identifier    String    // API key ID or IP address
  endpoint      String    // Specific endpoint or "global"
  requests      Int       @default(0)
  windowStart   DateTime  @default(now())
  lastReset     DateTime  @default(now())
  
  @@unique([identifier, endpoint])
  @@index([identifier])
  @@index([windowStart])
}

model SecurityLog {
  id          String    @id @default(cuid())
  apiKeyId    String
  eventType   String    // Type of security event (SUSPICIOUS_ACTIVITY, IP_WHITELIST_VIOLATION, etc.)
  metadata    Json?     // Additional event data
  timestamp   DateTime  @default(now())
  
  // Relations
  apiKey      ApiKey    @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  
  @@index([apiKeyId])
  @@index([eventType])
  @@index([timestamp])
}
