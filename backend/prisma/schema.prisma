// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  lastLogin     DateTime?
  r2FolderName  String?         @unique
  accounts      Account[]
  activities    Activity[]
  analytics     Analytics[]
  images        Image[]
  sessions      Session[]
  systemLogs    SystemLog[]
  systemMessages SystemMessage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom Models
model Image {
  id         String      @id @default(cuid())
  fileName   String
  fileKey    String      @unique
  fileSize   Int
  fileType   String
  uploadedAt DateTime    @default(now())
  userId     String
  height     Int?
  mimeType   String?
  width      Int?
  analytics  Analytics[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([uploadedAt])
}

// Analytics tracking for files
model Analytics {
  id        String         @id @default(cuid())
  imageId   String
  userId    String
  event     AnalyticsEvent
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  createdAt DateTime       @default(now())
  image     Image          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([imageId])
  @@index([userId])
  @@index([event])
  @@index([createdAt])
}

// User activity log
model Activity {
  id              String       @id @default(cuid())
  userId          String
  type            ActivityType
  message         String
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  isAdminActivity Boolean      @default(false)
  createdAt       DateTime     @default(now())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([isAdminActivity])
}

// System health monitoring
model SystemHealth {
  id          String   @id @default(cuid())
  service     String   @unique
  status      String   // 'healthy', 'degraded', 'down'
  uptime      Float    // percentage
  lastCheck   DateTime @default(now())
  responseTime Int?    // in milliseconds
  metadata    Json?

  @@index([service])
  @@index([lastCheck])
}

// System logs for admin monitoring
model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  source    String   // e.g., 'api', 'database', 'storage', 'auth'
  userId    String?
  ipAddress String?
  metadata  Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([level])
  @@index([source])
  @@index([createdAt])
  @@index([userId])
}

// System settings
model SystemSettings {
  id                String   @id @default(cuid())
  key               String   @unique
  value             String
  description       String?
  updatedAt         DateTime @updatedAt
  updatedBy         String?

  @@index([key])
}

// System announcements/messages for main page
model SystemMessage {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  type      MessageType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  user      User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([createdAt])
}

// Guest uploads tracking for automatic cleanup
model GuestUpload {
  id           String   @id @default(cuid())
  fileKey      String   @unique
  fileName     String
  fileSize     Int
  fileType     String
  mimeType     String?
  width        Int?
  height       Int?
  uploadedAt   DateTime @default(now())
  expiresAt    DateTime // Automatically set to uploadedAt + 14 days
  ipAddress    String?
  userAgent    String?
  isDeleted    Boolean  @default(false)
  deletedAt    DateTime?

  @@index([expiresAt])
  @@index([isDeleted])
  @@index([uploadedAt])
}

enum Role {
  USER
  ADMIN
}

enum AnalyticsEvent {
  VIEW
  DOWNLOAD
  SHARE
  THUMBNAIL_GENERATED
}

enum ActivityType {
  UPLOAD
  DELETE
  VIEW
  DOWNLOAD
  SHARE
  LOGIN
  LOGOUT
  SETTINGS_CHANGED
  STORAGE_OPTIMIZED
  MILESTONE_REACHED
}

enum LogLevel {
  INFO
  WARN
  ERROR
  DEBUG
}

enum MessageType {
  CRITICAL    // Red - Critical announcements, maintenance, outages
  WARNING     // Yellow - Important notices, updates, deprecations  
  INFO        // Blue - General information, new features, tips
} 